function [netObj] = model_lstm(netObj, time)
% model_lstm_encoder define the model of LSTM of the encoder part with
% Backpropogation Through Time (BPTT).

label = sprintf('_t%d', time);
if time == 1
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['inputgate_data' label]...
        'bottom' ['data' label] ...
        'top'    ['inputgate_data' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'inputgate_data_w', 'inputgate_data_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.sigmoid'...
        'name'   ['inputgate_sigmoid' label]...
        'bottom' ['inputgate_data' label]...
        'top'    ['inputgate_sigmoid' label]...
        });
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['forgetgate_data' label]...
        'bottom' ['data' label] ...
        'top'    ['forgetgate_data' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'forgetgate_data_w', 'forgetgate_data_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.sigmoid'...
        'name'   ['forgetgate_sigmoid' label]...
        'bottom' ['forgetgate_data' label]...
        'top'    ['forgetgate_sigmoid' label]...
        });
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['modulategate_data' label]...
        'bottom' ['data' label] ...
        'top'    ['modulategate_data' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'modulategate_data_w', 'modulategate_data_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.hybtangent'...
        'name'   ['modulategate_tanh' label]...
        'bottom' ['modulategate_data' label]...
        'top'    ['modulategate_tanh' label]...
        });
    netObj.newLayer({
        'type'   'layers.eltwise' ...
        'name'   ['cell' label] ...
        'bottom' {['modulategate_tanh' label], ['inputgate_sigmoid' label]} ...
        'top'    ['cell' label]...
        'operation' 'prod'
        })
    netObj.newLayer({
        'type' 'layers.hybtangent'...
        'name'   ['cell_tanh' label]...
        'bottom' ['cell' label] ...
        'top'    ['cell_tanh' label]
        })
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['outputgate_data' label]...
        'bottom' ['data' label] ...
        'top'    ['outputgate_data' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'outputgate_data_w', 'outputgate_data_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['outputgate_cell' label]...
        'bottom' ['cell' label] ...
        'top'    ['outputgate_cell' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'outputgate_cell_w', 'outputgate_cell_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.eltwise'...
        'name'   ['outputgate' label] ...
        'bottom' {['outputgate_data' label], ['outputgate_cell' label]}...
        'top'    ['outputgate' label]...
        'operation' 'sum'
        })
    netObj.newLayer({
        'type'   'layers.sigmoid'...
        'name'   ['outputgate_sigmoid' label]...
        'bottom' ['outputgate' label]...
        'top'    ['outputgate_sigmoid' label]...
        });
    netObj.newLayer({
        'type'   'layers.eltwise'...
        'name'   ['final' label] ...
        'bottom' {['outputgate_sigmoid' label], ['cell_tanh' label]}...
        'top'    ['final' label]...
        'operation' 'prod'
        })
else
    label_last = sprintf('_t%d', time-1);
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['inputgate_data' label]...
        'bottom' ['data' label] ...
        'top'    ['inputgate_data' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'inputgate_data_w', 'inputgate_data_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['inputgate_final' label]...
        'bottom' ['final' label_last] ...
        'top'    ['inputgate_final' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'inputgate_final_w', 'inputgate_final_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['inputgate_cell' label]...
        'bottom' ['cell' label_last] ...
        'top'    ['inputgate_cell' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'inputgate_cell_w', 'inputgate_cell_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.eltwise'...
        'name'   ['inputgate_cell_final' label] ...
        'bottom' {['inputgate_cell' label], ['inputgate_final' label]}...
        'top'    ['inputgate_cell_final' label]...
        'operation' 'sum'
        })
    netObj.newLayer({
        'type'   'layers.eltwise'...
        'name'   ['inputgate' label] ...
        'bottom' {['inputgate_data' label], ['inputgate_cell_final' label]} ...
        'top'    ['inputgate' label]...
        'operation' 'sum'
        })
    netObj.newLayer({
        'type'   'layers.sigmoid'...
        'name'   ['inputgate_sigmoid' label]...
        'bottom' ['inputgate' label]...
        'top'    ['inputgate_sigmoid' label]...
        });
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['forgetgate_data' label]...
        'bottom' ['data' label] ...
        'top'    ['forgetgate_data' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'forgetgate_data_w', 'forgetgate_data_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['forgetgate_cell' label]...
        'bottom' ['cell' label_last] ...
        'top'    ['forgetgate_cell' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'forgetgate_cell_w', 'forgetgate_cell_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['forgetgate_final' label]...
        'bottom' ['final' label_last] ...
        'top'    ['forgetgate_final' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'forgetgate_final_w', 'forgetgate_final_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.eltwise'...
        'name'   ['forgetgate_cell_final' label] ...
        'bottom' {['forgetgate_cell' label], ['forgetgate_final' label]}...
        'top'    ['forgetgate_cell_final' label]...
        'operation' 'sum'
        })
    netObj.newLayer({
        'type'   'layers.eltwise' ...
        'name'   ['forgetgate' label]...
        'bottom' {['forgetgate_data' label], ['forgetgate_cell_final' label]} ...
        'top'    ['forgetgate' label]...
        'operation' 'sum'
        })
    netObj.newLayer({
        'type'   'layers.sigmoid'...
        'name'   ['forgetgate_sigmoid' label]...
        'bottom' ['forgetgate' label] ...
        'top'    ['forgetgate_sigmoid' label]...
        });
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['modulategate_data' label]...
        'bottom' ['data' label] ...
        'top'    ['modulategate_data' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'modulategate_data_w', 'modulategate_data_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['modulategate_final' label]...
        'bottom' ['final' label_last] ...
        'top'    ['modulategate_final' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'modulategate_final_w', 'modulategate_final_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });

    netObj.newLayer({
        'type'   'layers.eltwise'...
        'name'   ['modulategate' label] ...
        'bottom' {['modulategate_data' label], ['modulategate_final' label]}...
        'top'    ['modulategate' label]...
        'operation' 'sum'
        })
    netObj.newLayer({
        'type'   'layers.hybtangent'...
        'name'   ['modulategate_tanh' label]...
        'bottom' ['modulategate' label]...
        'top'    ['modulategate_tanh' label]...
        });
    netObj.newLayer({
        'type'   'layers.eltwise' ...
        'name'   ['cell_mod_input' label] ...
        'bottom' {['modulategate_tanh' label], ['inputgate_sigmoid' label]} ...
        'top'    ['cell_mod_input' label]...
        'operation' 'prod'
        })
    netObj.newLayer({
        'type'   'layers.eltwise' ...
        'name'   ['cell_cell_forget' label] ...
        'bottom' {['cell' label_last], ['forgetgate_sigmoid' label]} ...
        'top'    ['cell_cell_forget' label]...
        'operation' 'prod'
        })
    netObj.newLayer({
        'type'   'layers.eltwise' ...
        'name'   ['cell' label] ...
        'bottom' {['cell_cell_forget' label], ['cell_mod_input' label]} ...
        'top'    ['cell' label]...
        'operation' 'sum'
        })
    netObj.newLayer({
        'type'   'layers.hybtangent'...
        'name'   ['cell_tanh' label]...
        'bottom' ['cell' label] ...
        'top'    ['cell_tanh' label]
        })
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['outputgate_data' label]...
        'bottom' ['data' label] ...
        'top'    ['outputgate_data' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'outputgate_data_w', 'outputgate_data_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['outputgate_cell' label]...
        'bottom' ['cell' label] ...
        'top'    ['outputgate_cell' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'outputgate_cell_w', 'outputgate_cell_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.convolution'...
        'name'   ['outputgate_final' label]...
        'bottom' ['final' label_last] ...
        'top'    ['outputgate_final' label]...
        'convolution_param' {
            'num_output'  256 ...
            'kernel_size' 1  ...
            'pad'         0  ...
            'stride'      1  ...
            }...
        'weight_param' {
            'name'         {'outputgate_final_w', 'outputgate_final_b'} ...
            'generator'    {@nn.generator.xavier, @nn.generator.constant} ...
            'learningRate' [1 2]
            }
        });
    netObj.newLayer({
        'type'   'layers.eltwise'...
        'name'   ['outputgate_cell_final' label] ...
        'bottom' {['outputgate_cell' label], ['outputgate_final' label]}...
        'top'    ['outputgate_cell_final' label]...
        'operation' 'sum'
        })
    netObj.newLayer({
        'type'   'layers.eltwise'...
        'name'   ['outputgate' label] ...
        'bottom' {['outputgate_data' label], ['outputgate_cell_final' label]}...
        'top'    ['outputgate' label]...
        'operation' 'sum'
        })
    netObj.newLayer({
        'type'   'layers.sigmoid'...
        'name'   ['outputgate_sigmoid' label]...
        'bottom' ['outputgate' label]...
        'top'    ['outputgate_sigmoid' label]...
        });
    netObj.newLayer({
        'type'   'layers.eltwise'...
        'name'   ['final' label] ...
        'bottom' {['outputgate_sigmoid' label], ['cell_tanh' label]}...
        'top'    ['final' label]...
        'operation' 'prod'
        })
end