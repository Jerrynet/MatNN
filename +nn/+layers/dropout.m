classdef Dropout < nn.layers.template.BaseLayer

    % Default parameters
    properties (SetAccess = protected, Transient)
        default_dropout_param = {
                    'name' {''}      ...  %empty names means use autogenerated name
            'enable_terms' true      ...
                    'rate' 0.5       ...
        };
    end

    methods
        % CPU Forward
        function out = f(obj, in, mask)
            out = in.*mask;
        end
        % CPU Backward
        function in_diff = b(obj, out_diff, mask)
            in_diff = out_diff.*mask;
        end

        % GPU Forward
        function out = gf(obj, varargin)
            out = obj.f(varargin{:});
        end
        % GPU Backward
        function in_diff = gb(obj, varargin)
            in_diff = obj.b(varargin{:});
        end

        % Forward function for training/testing routines
        function [top, weights, misc] = forward(obj, opts, top, bottom, weights, misc)
            p = obj.params.dropout;
            if opts.disableDropout || ~p.enable_terms
                top{1} = bottom{1};
            elseif opts.freezeDropout && numel(bottom{1}) == numel(misc{1})
                top{1} = bottom{1}.*misc{1};
            else
                if opts.gpuMode
                    mask = single(1 / (1 - p.rate)) .* (gpuArray.rand(size(bottom{1}),'single') >= p.rate);
                    top{1} = bottom{1} .* mask;
                else
                    mask = single(1 / (1 - p.rate)) .* (rand(size(bottom{1}),'single') >= p.rate);
                    top{1} = bottom{1} .* mask;
                end
                misc{1} = mask;
            end
        end
        % Backward function for training/testing routines
        function [bottom_diff, weights_diff, misc] = backward(obj, opts, top, bottom, weights, misc, top_diff, weights_diff)
            if opts.disableDropout || ~obj.params.dropout.enable_terms
                bottom_diff{1} = top_diff{1};
            else
                bottom_diff{1} = top_diff{1} .* misc{1};
            end
        end

        % Create resources (weight, misc)
        function resources = createResources(obj, opts, inSizes)
            p = obj.params.dropout;
            if p.enable_terms
                scale = single(1 / (1 - p.rate)) ;
                resources.misc{1} = scale.* single(rand(inSizes{1}) >= p.rate);
            else
                resources = {};
            end
        end
        % Calc Output sizes
        function outSizes = outputSizes(obj, opts, inSizes)
            outSizes = inSizes;
        end
        % Set parameters
        function setParams(obj, baseProperties)
            obj.setParams@nn.layers.template.BaseLayer(baseProperties);
            miscParam = obj.params.dropout;
            miscParam.name = {''};
            miscParam.enable_terms = true;
            miscParam.learningRate = 0;
            miscParam.weightDecay  = 0;
            obj.params.misc = miscParam;
        end
        % Setup function for training/testing routines
        function [outSizes, resources] = setup(obj, opts, baseProperties, inSizes)
            [outSizes, resources] = obj.setup@nn.layers.template.BaseLayer(opts, baseProperties, inSizes);
            assert(numel(baseProperties.bottom)==1);
            assert(numel(baseProperties.top)==1);

        end

    end


end