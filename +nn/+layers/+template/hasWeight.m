classdef hasWeight < handle

     % Default parameters
    properties (SetAccess = protected, Transient)
        default_weight_param = {
                'name' {'', ''}         ... %empty names means use autogenerated name
        'enable_terms' [true, true]     ... 
           'generator' {@nn.generator.uniform, @nn.generator.constant} ...
           'generator_param' {[], []}   ... %default param
        'learningRate' single([1 1])    ...
         'weightDecay' single([1 1])
        };
    end

    methods
        function [data, net] = backward(obj, nn, l, opts, data, net)
            % if opts.gpuMode
            %     bottom_diff1 = obj.gb(data.val{l.bottom(1)}, data.val{l.top(1)}, data.diff{l.top(1)});
            % else
            %     bottom_diff1 = obj.b(data.val{l.bottom(1)}, data.val{l.top(1)}, data.diff{l.top(1)});
            % end

            %data = nn.utils.accumulateData(data, bottom_diff1);
            %net = nn.utils.accumulateWeight(net, weight_diff1, weight_diff2);
        end
    end

end