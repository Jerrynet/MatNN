classdef WeightLayer < nn.layers.template.BaseLayer

     % Default parameters
    properties (SetAccess = protected, Transient)
        default_weight_param = {
                'name' {'', ''}         ... %empty names means use autogenerated name
        'enable_terms' [true, true]     ... 
           'generator' {@nn.generator.uniform, @nn.generator.constant} ...
           'generator_param' {[], []}   ... %default param
        'learningRate' single([1 1])    ...
         'weightDecay' single([1 1])
        };
    end

    properties
        weights = [];
    end

    methods
        function set.weights(obj, val)
            obj.weights = obj.connectData('weights', val, true);
        end
        function release(obj)
            obj.top = [];
            obj.bottom = [];
            obj.weights = [];
        end
        function vars = holdVars(obj)
            vars = [obj.bottom, obj.top, obj.weights];
        end
        function v = propertyDevice(obj)
            v = obj.propertyDevice@nn.layers.template.BaseLayer();
            v.weights = -1;
        end
        function createResources(obj, ~, varargin) % varargin{:} = sizes of each weight
            data = obj.net.data;
            assert(numel(varargin) == numel(obj.params.weight.name), 'WeightLayer: You must provide weight sizes.');

            wName = cell(1, numel(obj.params.weight.name));
            for i=1:numel(obj.params.weight.name)
                if isempty(obj.params.weight.name{i})
                    wName{i} = [obj.name, '_weight_', num2str(i)];
                else
                    wName{i} = obj.params.weight.name{i};
                end
            end
            obj.weights = wName;
            for i=1:numel(obj.params.weight.name)
                if obj.params.weight.enable_terms(i)
                    data.setPartial(wName{i}, 'val',      obj.params.weight.generator{i}(varargin{i}, obj.params.weight.generator_param{i}), ...
                                              'preserve', true, ...
                                              'lr',       obj.params.weight.learningRate(i), ...
                                              'decay',    obj.params.weight.weightDecay(i));
                    if obj.net.opts.gpu
                        data.val{obj.weights(i)} = gpuArray(data.val{obj.weights(i)});
                    end
                end
            end
        end
    end

end