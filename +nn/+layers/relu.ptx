//
// Generated by NVIDIA NVVM Compiler
<<<<<<< HEAD
// Compiler built on Fri Aug  1 10:29:38 2014 (1406860178)
// Cuda compilation tools, release 6.5, V6.5.14
//

.version 4.1
.target sm_20
.address_size 64


=======
// Compiler built on Fri Sep  5 12:40:32 2014 (1409892032)
// Cuda compilation tools, release 6.5, V6.5.19
//

.version 4.1
.target sm_50
.address_size 64


.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

>>>>>>> upstream/master
.visible .entry _Z7forwardPfi(
	.param .u64 _Z7forwardPfi_param_0,
	.param .u32 _Z7forwardPfi_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<6>;
	.reg .f32 	%f<4>;
	.reg .s64 	%rd<5>;


	ld.param.u64 	%rd1, [_Z7forwardPfi_param_0];
	ld.param.u32 	%r2, [_Z7forwardPfi_param_1];
<<<<<<< HEAD
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;
=======
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r3;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB5_2;
>>>>>>> upstream/master

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f1, [%rd4];
	mov.f32 	%f2, 0f00000000;
	max.f32 	%f3, %f1, %f2;
	st.global.f32 	[%rd4], %f3;

<<<<<<< HEAD
BB0_2:
=======
BB5_2:
>>>>>>> upstream/master
	ret;
}

.visible .entry _Z8backwardPfPKfi(
	.param .u64 _Z8backwardPfPKfi_param_0,
	.param .u64 _Z8backwardPfPKfi_param_1,
	.param .u32 _Z8backwardPfPKfi_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .s32 	%r<6>;
	.reg .f32 	%f<6>;
	.reg .s64 	%rd<9>;


	ld.param.u64 	%rd2, [_Z8backwardPfPKfi_param_0];
	ld.param.u64 	%rd3, [_Z8backwardPfPKfi_param_1];
	ld.param.u32 	%r2, [_Z8backwardPfPKfi_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32	%p1, %r1, %r2;
<<<<<<< HEAD
	@%p1 bra 	BB1_5;
=======
	@%p1 bra 	BB6_5;
>>>>>>> upstream/master

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd1, %rd4, %rd5;
	ld.global.f32 	%f3, [%rd1];
	setp.gt.f32	%p2, %f3, 0f00000000;
<<<<<<< HEAD
	@%p2 bra 	BB1_3;

	mov.f32 	%f5, 0f00000000;
	bra.uni 	BB1_4;

BB1_3:
=======
	@%p2 bra 	BB6_3;

	mov.f32 	%f5, 0f00000000;
	bra.uni 	BB6_4;

BB6_3:
>>>>>>> upstream/master
	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f5, [%rd8];

<<<<<<< HEAD
BB1_4:
	st.global.f32 	[%rd1], %f5;

BB1_5:
=======
BB6_4:
	st.global.f32 	[%rd1], %f5;

BB6_5:
>>>>>>> upstream/master
	ret;
}


